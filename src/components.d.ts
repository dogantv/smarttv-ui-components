/**
 * This is an autogenerated file created by the Stencil build process.
 * It contains typing information for all components that exist in this project
 * and imports for stencil collections that might be configured in your stencil.config.js file
 */


import {
  ImageRounded as ImageRounded
} from './components/image-rounded/image-rounded';

declare global {
  interface HTMLImageRoundedElement extends ImageRounded, HTMLElement {
  }
  var HTMLImageRoundedElement: {
    prototype: HTMLImageRoundedElement;
    new (): HTMLImageRoundedElement;
  };
  interface HTMLElementTagNameMap {
    "image-rounded": HTMLImageRoundedElement;
  }
  interface ElementTagNameMap {
    "image-rounded": HTMLImageRoundedElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "image-rounded": JSXElements.ImageRoundedAttributes;
    }
  }
  namespace JSXElements {
    export interface ImageRoundedAttributes extends HTMLAttributes {
      config?: {
    width?: number,
    height?: number,
    border?: {
      color?: string,
      padding?: number
    }
  };
      image?: string;
    }
  }
}


import {
  MainLogo as MainLogo
} from './components/main-logo/main-logo';

declare global {
  interface HTMLMainLogoElement extends MainLogo, HTMLElement {
  }
  var HTMLMainLogoElement: {
    prototype: HTMLMainLogoElement;
    new (): HTMLMainLogoElement;
  };
  interface HTMLElementTagNameMap {
    "main-logo": HTMLMainLogoElement;
  }
  interface ElementTagNameMap {
    "main-logo": HTMLMainLogoElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "main-logo": JSXElements.MainLogoAttributes;
    }
  }
  namespace JSXElements {
    export interface MainLogoAttributes extends HTMLAttributes {
      image?: string;
    }
  }
}


import {
  PageBackground as PageBackground
} from './components/page-background/page-background';

declare global {
  interface HTMLPageBackgroundElement extends PageBackground, HTMLElement {
  }
  var HTMLPageBackgroundElement: {
    prototype: HTMLPageBackgroundElement;
    new (): HTMLPageBackgroundElement;
  };
  interface HTMLElementTagNameMap {
    "page-background": HTMLPageBackgroundElement;
  }
  interface ElementTagNameMap {
    "page-background": HTMLPageBackgroundElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "page-background": JSXElements.PageBackgroundAttributes;
    }
  }
  namespace JSXElements {
    export interface PageBackgroundAttributes extends HTMLAttributes {
      gradient?: any;
      key?: any;
      type?: string;
      value?: string;
    }
  }
}


import {
  PageLayout as PageLayout
} from './components/page-layout/page-layout';

declare global {
  interface HTMLPageLayoutElement extends PageLayout, HTMLElement {
  }
  var HTMLPageLayoutElement: {
    prototype: HTMLPageLayoutElement;
    new (): HTMLPageLayoutElement;
  };
  interface HTMLElementTagNameMap {
    "page-layout": HTMLPageLayoutElement;
  }
  interface ElementTagNameMap {
    "page-layout": HTMLPageLayoutElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "page-layout": JSXElements.PageLayoutAttributes;
    }
  }
  namespace JSXElements {
    export interface PageLayoutAttributes extends HTMLAttributes {
      direction?: string;
      width?: string;
    }
  }
}

