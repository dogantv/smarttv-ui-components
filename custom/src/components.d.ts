/**
 * This is an autogenerated file created by the Stencil build process.
 * It contains typing information for all components that exist in this project
 * and imports for stencil collections that might be configured in your stencil.config.js file
 */

import '../page';

import { ImageRounded as ImageRounded } from './components/common/image-rounded/image-rounded';

interface HTMLImageRoundedElement extends ImageRounded, HTMLElement {
}
declare var HTMLImageRoundedElement: {
  prototype: HTMLImageRoundedElement;
  new (): HTMLImageRoundedElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "image-rounded": HTMLImageRoundedElement;
  }
  interface ElementTagNameMap {
      "image-rounded": HTMLImageRoundedElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "image-rounded": JSXElements.ImageRoundedAttributes;
      }
  }
  namespace JSXElements {
      export interface ImageRoundedAttributes extends HTMLAttributes {
        
          image?: any,
          config?: any
      }
  }
}

import { ListPlayCard as ListPlayCard } from './components/common/list-play-card/list-play-card';

interface HTMLListPlayCardElement extends ListPlayCard, HTMLElement {
}
declare var HTMLListPlayCardElement: {
  prototype: HTMLListPlayCardElement;
  new (): HTMLListPlayCardElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "list-play-card": HTMLListPlayCardElement;
  }
  interface ElementTagNameMap {
      "list-play-card": HTMLListPlayCardElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "list-play-card": JSXElements.ListPlayCardAttributes;
      }
  }
  namespace JSXElements {
      export interface ListPlayCardAttributes extends HTMLAttributes {
        
          image?: any,
          sectionTitle?: any,
          currentFocus?: any,
          data?: any,
          isasync?: any,
          async?: any,
          key?: any
      }
  }
}

import { LoadingElement as LoadingElement } from './components/common/loading/loading-element';

interface HTMLLoadingElementElement extends LoadingElement, HTMLElement {
}
declare var HTMLLoadingElementElement: {
  prototype: HTMLLoadingElementElement;
  new (): HTMLLoadingElementElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "loading-element": HTMLLoadingElementElement;
  }
  interface ElementTagNameMap {
      "loading-element": HTMLLoadingElementElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "loading-element": JSXElements.LoadingElementAttributes;
      }
  }
  namespace JSXElements {
      export interface LoadingElementAttributes extends HTMLAttributes {
        
      }
  }
}

import { MainLogo as MainLogo } from './components/common/main-logo/main-logo';

interface HTMLMainLogoElement extends MainLogo, HTMLElement {
}
declare var HTMLMainLogoElement: {
  prototype: HTMLMainLogoElement;
  new (): HTMLMainLogoElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "main-logo": HTMLMainLogoElement;
  }
  interface ElementTagNameMap {
      "main-logo": HTMLMainLogoElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "main-logo": JSXElements.MainLogoAttributes;
      }
  }
  namespace JSXElements {
      export interface MainLogoAttributes extends HTMLAttributes {
        
          image?: any
      }
  }
}

